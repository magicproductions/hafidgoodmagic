# Generated by Django 4.1.3 on 2022-11-25 01:38

from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import modelcluster.contrib.taggit
import modelcluster.fields
import streams.blocks
import wagtail.blocks
import wagtail.contrib.routable_page.models
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailimages", "0024_index_image_file_hash"),
        ("wagtailcore", "0078_referenceindex"),
        ("taggit", "0005_auto_20220424_2025"),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogAuthor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                (
                    "image",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Author",
                "verbose_name_plural": "Blog Authors",
            },
        ),
        migrations.CreateModel(
            name="BlogCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        allow_unicode=True,
                        blank=True,
                        editable=False,
                        help_text="A slug to identify posts by this category.",
                        max_length=150,
                        populate_from="name",
                        verbose_name="slug",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Category",
                "verbose_name_plural": "Blog Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="BlogDetailPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("excerpt", models.CharField(max_length=200, null=True)),
                (
                    "content",
                    wagtail.fields.StreamField(
                        [
                            (
                                "title_and_text",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.blocks.CharBlock(
                                                help_text="Add your title",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.blocks.TextBlock(
                                                help_text="Add additional text",
                                                required=True,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("full_richtext", streams.blocks.RichtextBlock()),
                            ("simple_richtext", streams.blocks.SimpleRichtextBlock()),
                            (
                                "cards",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.blocks.CharBlock(
                                                help_text="Add your title",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "cards",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "image",
                                                            wagtail.images.blocks.ImageChooserBlock(
                                                                required=True
                                                            ),
                                                        ),
                                                        (
                                                            "title",
                                                            wagtail.blocks.CharBlock(
                                                                max_length=40,
                                                                required=True,
                                                            ),
                                                        ),
                                                        (
                                                            "text",
                                                            wagtail.blocks.TextBlock(
                                                                max_length=200,
                                                                required=True,
                                                            ),
                                                        ),
                                                        (
                                                            "button_page",
                                                            wagtail.blocks.PageChooserBlock(
                                                                required=False
                                                            ),
                                                        ),
                                                        (
                                                            "button_url",
                                                            wagtail.blocks.URLBlock(
                                                                help_text="If the button page above is selected, that will be used first.",
                                                                required=False,
                                                            ),
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "cta",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.blocks.CharBlock(
                                                max_length=60, required=True
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.blocks.RichTextBlock(
                                                features=["bold", "italic"],
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "button_page",
                                            wagtail.blocks.PageChooserBlock(
                                                required=False
                                            ),
                                        ),
                                        (
                                            "button_url",
                                            wagtail.blocks.URLBlock(required=False),
                                        ),
                                        (
                                            "button_text",
                                            wagtail.blocks.CharBlock(
                                                default="Learn More",
                                                max_length=40,
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "cta_bg_image",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                required=True
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "quote",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "text",
                                            wagtail.blocks.TextBlock(required=False),
                                        ),
                                        (
                                            "quote_author",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                    ]
                                ),
                            ),
                        ],
                        blank=True,
                        null=True,
                        use_json_field=None,
                    ),
                ),
                (
                    "blog_image",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "categories",
                    modelcluster.fields.ParentalManyToManyField(
                        blank=True, to="blog.blogcategory"
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="BlogListingPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "wagtailcore.page",
            ),
        ),
        migrations.CreateModel(
            name="VideoBlogPage",
            fields=[
                (
                    "blogdetailpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="blog.blogdetailpage",
                    ),
                ),
                ("youtube_video_id", models.CharField(max_length=30)),
            ],
            options={"abstract": False,},
            bases=("blog.blogdetailpage",),
        ),
        migrations.CreateModel(
            name="BlogPageTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="blog.blogdetailpage",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.AddField(
            model_name="blogdetailpage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="blog.BlogPageTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="BlogAuthorsOrderable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="blog.blogauthor",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_authors",
                        to="blog.blogdetailpage",
                    ),
                ),
            ],
            options={"ordering": ["sort_order"], "abstract": False,},
        ),
        migrations.CreateModel(
            name="ArticleBlogPage",
            fields=[
                (
                    "blogdetailpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="blog.blogdetailpage",
                    ),
                ),
                ("subtitle", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "intro_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Best size for this image 1200px X 800px",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=("blog.blogdetailpage",),
        ),
    ]
